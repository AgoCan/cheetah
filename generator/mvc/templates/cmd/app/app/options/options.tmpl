package options

import (
	"{{ .Title }}/internal/config"
	"{{ .Title }}/internal/pkg/database"
	"{{ .Title }}/internal/pkg/middleware/log"
	"{{ .Title }}/internal/server"
)

const (
	_defaultConfigFile = "config/config.yaml"
)

type AppOptions struct {
	ConfFile string
	Config   *config.Config
}

func NewAppOptions() *AppOptions {
	o := &AppOptions{}
	return o
}

func (o *AppOptions) NewServer() (*server.Server, error) {
	s := server.NewServer()
	o.loadConfig(o.ConfFile)
	s.Config = o.Config
	s.Log = log.NewClient(s.Config.Log)

	Connect := o.Config.DB.Mysql.Username + ":" + o.Config.DB.Mysql.Password + "@tcp(" +
		o.Config.DB.Mysql.Host + ":" + o.Config.DB.Mysql.Port + ")/" + o.Config.DB.Mysql.DbName +
		"?charset=utf8mb4&parseTime=True&loc=Local"

	s.DB = database.NewClient(Connect,
		database.WithMigrate(true))
	return s, nil
}

func (o *AppOptions) loadConfig(configFile string) {
	if configFile == "" {
		configFile = _defaultConfigFile
	}
	o.Config = config.New(configFile)
}
